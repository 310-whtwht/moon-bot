# Docker Standards & Best Practices

## 1. Dockerfile作成規約

### 1.1 基本構造
```dockerfile
# マルチステージビルドの基本構造
# ビルドステージ
FROM golang:1.21-alpine AS builder

# メタデータ
LABEL maintainer="trading-system@example.com"
LABEL version="1.0.0"
LABEL description="Trading System API"

# 作業ディレクトリ設定
WORKDIR /app

# 依存関係のコピーとインストール
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
COPY . .

# ビルド実行
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/api

# 実行ステージ
FROM alpine:latest

# セキュリティ: 非rootユーザー作成
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 必要なパッケージのインストール
RUN apk --no-cache add ca-certificates tzdata

# 作業ディレクトリ設定
WORKDIR /app

# ビルド成果物のコピー
COPY --from=builder /app/main .

# 設定ファイルのコピー
COPY --from=builder /app/configs ./configs

# 権限設定
RUN chown -R appuser:appgroup /app

# 非rootユーザーに切り替え
USER appuser

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1

# ポート公開
EXPOSE 8080

# エントリーポイント
ENTRYPOINT ["./main"]
```

### 1.2 最適化規約
```dockerfile
# レイヤー最適化の例
FROM golang:1.21-alpine AS builder

WORKDIR /app

# 依存関係を先にコピー（キャッシュ活用）
COPY go.mod go.sum ./
RUN go mod download

# ソースコードをコピー
COPY . .

# ビルドフラグで最適化
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 最小限の実行環境
FROM scratch

# 証明書とタイムゾーン情報をコピー
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

WORKDIR /app
COPY --from=builder /app/main .

EXPOSE 8080
ENTRYPOINT ["./main"]
```

### 1.3 セキュリティ規約
```dockerfile
# セキュリティ強化版Dockerfile
FROM golang:1.21-alpine AS builder

# セキュリティアップデート
RUN apk update && apk upgrade

WORKDIR /app

# 依存関係のコピー
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
COPY . .

# セキュリティフラグ付きビルド
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s -extldflags=-static" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 最小限の実行環境
FROM gcr.io/distroless/static-debian11

# 非rootユーザー作成
USER 1001:1001

WORKDIR /app
COPY --from=builder /app/main .

EXPOSE 8080
ENTRYPOINT ["./main"]
```

## 2. Docker Compose設定規約

### 2.1 基本構成
```yaml
# docker-compose.yml
version: '3.8'

services:
  # APIサービス
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: production
    image: trading-system/api:latest
    container_name: trading-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - DB_HOST=mysql
      - REDIS_HOST=redis
    env_file:
      - .env.production
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    volumes:
      - ./logs:/app/logs:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Botサービス
  bot:
    build:
      context: ./apps/bot
      dockerfile: Dockerfile
    image: trading-system/bot:latest
    container_name: trading-bot
    restart: unless-stopped
    environment:
      - ENV=production
      - API_HOST=api
      - REDIS_HOST=redis
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    volumes:
      - ./logs:/app/logs:ro

  # Webサービス
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    image: trading-system/web:latest
    container_name: trading-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      - api
    networks:
      - trading-network

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: trading-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    ports:
      - "3306:3306"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - trading-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading-network:
    driver: bridge
```

### 2.2 開発環境設定
```yaml
# docker-compose.dev.yml
version: '3.8'

services:
  api:
    build:
      target: development
    volumes:
      - ./apps/api:/app
      - /app/vendor
    environment:
      - ENV=development
      - DEBUG=true
    command: ["go", "run", "./cmd/api"]

  web:
    build:
      target: development
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev"]

  # 開発用ツール
  mailhog:
    image: mailhog/mailhog:latest
    container_name: trading-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - trading-network

  # 開発用データベース
  mysql-dev:
    image: mysql:8.0
    container_name: trading-mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: devpassword
      MYSQL_DATABASE: trading_dev
      MYSQL_USER: devuser
      MYSQL_PASSWORD: devpassword
    ports:
      - "3307:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
    networks:
      - trading-network

volumes:
  mysql_dev_data:
    driver: local
```

## 3. マルチステージビルド規約

### 3.1 Goアプリケーション
```dockerfile
# マルチステージビルド（Go）
FROM golang:1.21-alpine AS base

# 共通の依存関係
RUN apk add --no-cache git ca-certificates tzdata

WORKDIR /app

# 依存関係のコピー
COPY go.mod go.sum ./
RUN go mod download

# 開発ステージ
FROM base AS development

# 開発用ツールのインストール
RUN go install github.com/cosmtrek/air@latest
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# ソースコードのコピー
COPY . .

# 開発用コマンド
CMD ["air"]

# テストステージ
FROM base AS testing

# ソースコードのコピー
COPY . .

# テスト実行
RUN go test -v -race -coverprofile=coverage.out ./...

# ビルドステージ
FROM base AS builder

# ソースコードのコピー
COPY . .

# ビルド実行
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 本番ステージ
FROM alpine:latest AS production

# セキュリティ: 非rootユーザー
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 必要なパッケージ
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app

# ビルド成果物のコピー
COPY --from=builder /app/main .

# 設定ファイル
COPY --from=builder /app/configs ./configs

# 権限設定
RUN chown -R appuser:appgroup /app

USER appuser

EXPOSE 8080
ENTRYPOINT ["./main"]
```

### 3.2 Next.jsアプリケーション
```dockerfile
# マルチステージビルド（Next.js）
FROM node:18-alpine AS base

WORKDIR /app

# 依存関係のコピー
COPY package*.json ./

# 開発ステージ
FROM base AS development

# 開発用依存関係のインストール
RUN npm ci

# ソースコードのコピー
COPY . .

# 開発サーバー起動
CMD ["npm", "run", "dev"]

# ビルドステージ
FROM base AS builder

# 依存関係のインストール
RUN npm ci --only=production

# ソースコードのコピー
COPY . .

# ビルド実行
RUN npm run build

# 本番ステージ
FROM node:18-alpine AS production

# セキュリティ: 非rootユーザー
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# 依存関係のコピー
COPY --from=builder /app/package*.json ./
RUN npm ci --only=production && npm cache clean --force

# ビルド成果物のコピー
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# 権限設定
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]
```

## 4. セキュリティベストプラクティス

### 4.1 コンテナセキュリティ
```dockerfile
# セキュリティ強化版Dockerfile
FROM golang:1.21-alpine AS builder

# セキュリティアップデート
RUN apk update && apk upgrade

# 最小限のパッケージのみインストール
RUN apk add --no-cache ca-certificates tzdata

WORKDIR /app

# 依存関係のコピー
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
COPY . .

# セキュリティフラグ付きビルド
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s -extldflags=-static" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 最小限の実行環境
FROM gcr.io/distroless/static-debian11

# 非rootユーザー
USER 1001:1001

WORKDIR /app
COPY --from=builder /app/main .

# セキュリティ設定
ENV GOTRACEBACK=none

EXPOSE 8080
ENTRYPOINT ["./main"]
```

### 4.2 セキュリティスキャン
```yaml
# .github/workflows/security-scan.yml
name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t trading-system .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trading-system:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
```

### 4.3 シークレット管理
```yaml
# docker-compose.prod.yml
version: '3.8'

services:
  api:
    image: trading-system/api:latest
    environment:
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - API_KEY_FILE=/run/secrets/api_key
    secrets:
      - db_password
      - redis_password
      - api_key

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  api_key:
    file: ./secrets/api_key.txt
```

## 5. パフォーマンス最適化

### 5.1 イメージサイズ最適化
```dockerfile
# 最小限のイメージサイズ
FROM golang:1.21-alpine AS builder

# 必要なパッケージのみインストール
RUN apk add --no-cache git

WORKDIR /app

# 依存関係のコピー
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
COPY . .

# 静的リンクでビルド
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 最小限の実行環境
FROM scratch

# 証明書のコピー
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

WORKDIR /app
COPY --from=builder /app/main .

EXPOSE 8080
ENTRYPOINT ["./main"]
```

### 5.2 ビルドキャッシュ最適化
```dockerfile
# キャッシュ最適化版Dockerfile
FROM golang:1.21-alpine AS builder

WORKDIR /app

# 依存関係を先にコピー（キャッシュ活用）
COPY go.mod go.sum ./
RUN go mod download

# ソースコードをコピー
COPY . .

# ビルド実行
RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o main ./cmd/api

# 実行環境
FROM alpine:latest

RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app
COPY --from=builder /app/main .

EXPOSE 8080
ENTRYPOINT ["./main"]
```

## 6. 監視・ログ規約

### 6.1 ヘルスチェック
```dockerfile
# ヘルスチェック付きDockerfile
FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY . .

RUN CGO_ENABLED=0 GOOS=linux \
    go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o main ./cmd/api

FROM alpine:latest

RUN apk --no-cache add ca-certificates tzdata curl

WORKDIR /app
COPY --from=builder /app/main .

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/healthz || exit 1

EXPOSE 8080
ENTRYPOINT ["./main"]
```

### 6.2 ログ設定
```yaml
# docker-compose.yml（ログ設定）
services:
  api:
    image: trading-system/api:latest
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "logging=structured"
      - "service=api"

  bot:
    image: trading-system/bot:latest
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "logging=structured"
      - "service=bot"
```

## 7. 環境別設定

### 7.1 本番環境
```yaml
# docker-compose.prod.yml
version: '3.8'

services:
  api:
    image: trading-system/api:latest
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
```

### 7.2 ステージング環境
```yaml
# docker-compose.staging.yml
version: '3.8'

services:
  api:
    image: trading-system/api:staging
    environment:
      - ENV=staging
      - LOG_LEVEL=debug
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  web:
    image: trading-system/web:staging
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=http://api:8080
```

## 8. CI/CD統合

### 8.1 GitHub Actions
```yaml
# .github/workflows/docker-build.yml
name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push API
      uses: docker/build-push-action@v4
      with:
        context: ./apps/api
        push: true
        tags: |
          trading-system/api:${{ github.sha }}
          trading-system/api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Web
      uses: docker/build-push-action@v4
      with:
        context: ./apps/web
        push: true
        tags: |
          trading-system/web:${{ github.sha }}
          trading-system/web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
```

### 8.2 デプロイメント
```yaml
# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d
        docker system prune -f
```

## 9. トラブルシューティング

### 9.1 デバッグ用コンテナ
```dockerfile
# デバッグ用Dockerfile
FROM golang:1.21-alpine AS debug

# デバッグツールのインストール
RUN apk add --no-cache \
    git \
    curl \
    wget \
    vim \
    htop \
    procps

WORKDIR /app

# 依存関係のコピー
COPY go.mod go.sum ./
RUN go mod download

# ソースコードのコピー
COPY . .

# デバッグ用コマンド
CMD ["sh"]
```

### 9.2 ログ分析
```bash
# ログ分析スクリプト
#!/bin/bash

# コンテナログの取得
docker logs trading-api --tail 100

# エラーログの抽出
docker logs trading-api 2>&1 | grep -i error

# パフォーマンスログの分析
docker logs trading-api 2>&1 | grep -E "(latency|duration|timeout)"

# リソース使用量の確認
docker stats --no-stream
```

## 10. ベストプラクティスチェックリスト

### 10.1 セキュリティ
- [ ] 非rootユーザーを使用
- [ ] 最小限のパッケージのみインストール
- [ ] セキュリティスキャンを実行
- [ ] シークレットを適切に管理
- [ ] 不要なポートを公開しない

### 10.2 パフォーマンス
- [ ] マルチステージビルドを使用
- [ ] イメージサイズを最小化
- [ ] キャッシュを活用
- [ ] ヘルスチェックを実装
- [ ] リソース制限を設定

### 10.3 運用
- [ ] ログ設定を適切に行う
- [ ] 環境別設定を準備
- [ ] CI/CDパイプラインを構築
- [ ] 監視・アラートを設定
- [ ] バックアップ戦略を策定